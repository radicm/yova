require: rubocop-rails

Rails:
  Enabled: true

AllCops:
  Exclude:
    - "bin/**/*"
    - "db/migrate/**/*"
    - "db/seeds/**/*"
    - "db/*.rb"
    - "app/lib/bi_data/race_data_sync.rb"
    - "app/controllers/admin/purchased_memberships_controller.rb"
    - "spec/controllers/api/v1/reservations_controller_spec.rb"
    - "config/**/*"
    - "lib/tasks/**/*"
    - "spec/spec_helper.rb"
    - "spec/rails_helper.rb"
    - "config.ru"
    - "Rakefile"

Bundler/OrderedGems:
  Description: >-
    Gems within groups in the Gemfile should be alphabetically sorted.
  Enabled: false

Style/StructInheritance:
  Enabled: false

Layout/HashAlignment:
  Enabled: false

Style/AsciiComments:
  Enabled: false

Rails/FilePath:
  EnforcedStyle: arguments

Rails/Presence:
  Enabled: false

Lint/MissingCopEnableDirective:
  Enabled: false

Rails/BulkChangeTable:
  Enabled: false

Rails/DynamicFindBy:
  Enabled: false

Rails/HasAndBelongsToMany:
  Enabled: false

Rails/SkipsModelValidations:
  Enabled: false

Rails/OutputSafety:
  Enabled: false

Layout/LineLength:
  Description: "Limit lines to 120 characters."
  Enabled: true
  Max: 120
  IgnoredPatterns: ['\A#']
  Exclude:
    - "app/lib/booking.rb"

Metrics/ModuleLength:
  Max: 300
  Exclude:
    - "spec/**/*"

Metrics/MethodLength:
  Description: "Limit method lines to 30"
  Enabled: true
  Max: 30
  Exclude:
    - "db/**/*"
    - "app/lib/booking/list_available_slots.rb"
    - "app/lib/bi_data/reservation_sync.rb"
    - "app/controllers/api/v1/memberships_controller.rb"
    - "app/controllers/api/v1/reservations_controller.rb"

Metrics/BlockLength:
  Exclude:
    - "spec/**/*"
    - "db/**/*"
    - "app/lib/bi_data/reservation_sync.rb"
    - "config/routes.rb"
  Max: 40

Metrics/ParameterLists:
  Max: 6

Metrics/ClassLength:
  Max: 200

Metrics/AbcSize:
  Enabled: false

Naming/MethodName:
  Exclude:
    - "app/lib/core/resultable.rb"

Naming/MemoizedInstanceVariableName:
  Enabled: true
  EnforcedStyleForLeadingUnderscores: optional

Layout:
  Style/EmptyLineAfterGuardClause:
    Enabled: true

Style/Alias:
  EnforcedStyle: prefer_alias_method

Style/StringLiterals:
  Description: "Checks if uses of quotes match the configured preference."
  EnforcedStyle: double_quotes
  ConsistentQuotesInMultiline: false

Style/FrozenStringLiteralComment:
  Enabled: false

Style/FormatString:
  Enabled: false

Metrics/PerceivedComplexity:
  Enabled: false
Metrics/CyclomaticComplexity:
  Enabled: false

Style/Documentation:
  Enabled: false

Style/IfUnlessModifier:
  Enabled: false

Style/LambdaCall:
  Description: 'Use lambda.call(...) instead of lambda.(...).'
  Enabled: false

Style/SymbolArray:
  Enabled: true
  EnforcedStyle: brackets
  MinSize: 1

Style/Lambda:
  Enabled: false

Style/RaiseArgs:
  Enabled: false

Style/BeginBlock:
  Description: 'Avoid the use of BEGIN blocks.'
  Enabled: false

Style/RedundantBegin:
  Enabled: false

Style/SingleLineMethods:
  Enabled: false

Style/BlockDelimiters:
  Description: >-
                Avoid using {...} for multi-line blocks (multiline chaining is
                always ugly).
                Prefer {...} over do...end for single-line blocks.
  StyleGuide: '#single-line-blocks'
  Enabled: true
  VersionAdded: '0.30'
  VersionChanged: '0.35'
  EnforcedStyle: braces_for_chaining
  SupportedStyles:
    # The `line_count_based` style enforces braces around single line blocks and
    # do..end around multi-line blocks.
    - line_count_based
    # The `semantic` style enforces braces around functional blocks, where the
    # primary purpose of the block is to return a value and do..end for
    # procedural blocks, where the primary purpose of the block is its
    # side-effects.
    #
    # This looks at the usage of a block's method to determine its type (e.g. is
    # the result of a `map` assigned to a variable or passed to another
    # method) but exceptions are permitted in the `ProceduralMethods`,
    # `FunctionalMethods` and `IgnoredMethods` sections below.
    - semantic
    # The `braces_for_chaining` style enforces braces around single line blocks
    # and do..end around multi-line blocks, except for multi-line blocks whose
    # return value is being chained with another method (in which case braces
    # are enforced).
    - braces_for_chaining
  ProceduralMethods:
    # Methods that are known to be procedural in nature but look functional from
    # their usage, e.g.
    #
    #   time = Benchmark.realtime do
    #     foo.bar
    #   end
    #
    # Here, the return value of the block is discarded but the return value of
    # `Benchmark.realtime` is used.
    - benchmark
    - bm
    - bmbm
    - create
    - each_with_object
    - measure
    - new
    - realtime
    - tap
    - with_object
  FunctionalMethods:
    # Methods that are known to be functional in nature but look procedural from
    # their usage, e.g.
    #
    #   let(:foo) { Foo.new }
    #
    # Here, the return value of `Foo.new` is used to define a `foo` helper but
    # doesn't appear to be used from the return value of `let`.
    - let
    - let!
    - subject
    - watch
  IgnoredMethods:
    # Methods that can be either procedural or functional and cannot be
    # categorised from their usage alone, e.g.
    #
    #   foo = lambda do |x|
    #     puts "Hello, #{x}"
    #   end
    #
    #   foo = lambda do |x|
    #     x * 100
    #   end
    #
    # Here, it is impossible to tell from the return value of `lambda` whether
    # the inner block's return value is significant.
    - lambda
    - proc
    - it
    -
Style/HashEachMethods:
  Description: 'Use Hash#each_key and Hash#each_value.'
  StyleGuide: '#hash-each'
  Enabled: true
  VersionAdded: '0.80'
  Safe: false

Style/HashTransformKeys:
  Description: 'Prefer `transform_keys` over `each_with_object` and `map`.'
  Enabled: true
  VersionAdded: '0.80'
  Safe: false

Style/HashTransformValues:
  Description: 'Prefer `transform_values` over `each_with_object` and `map`.'
  Enabled: true
  VersionAdded: '0.80'
  Safe: false

Lint/MissingSuper:
  Exclude:
    - 'app/lib/**/*'
